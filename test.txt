package nw;

import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.util.regex.Pattern;

public class ValidateDotNetConfig {

	public static void main(String args[]) {
		try {

			File stocks = new File("nw.xml");
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(stocks);
			doc.getDocumentElement().normalize();

			//System.out.println("root of xml file:" + doc.getDocumentElement().getNodeName());
						
			String name=doc.getElementsByTagName("name").item(0).getChildNodes().item(0).getNodeValue();
			
			if (!Pattern.matches("(PROD|DR|TEST|PT|ST|ST1|IT|DEV|UAT|RT|PERF|PPRD|BETA)_[A-Z]*_[0-9a-zA-Z-]*_[0-9]*", name)) {
				System.out.println("Name ["+name+"] is invalid");
			}
			
			String licenseKey=doc.getElementsByTagName("service").item(0).getAttributes().getNamedItem("licenseKey").getNodeValue();
			if (licenseKey==null) {
				System.out.println("Absent License Key");
			}
			else if (!"abc".equals(licenseKey)) {
				System.out.println("License Key is invalid");
			}

			System.out.println("Verification completed");
		} catch (Exception ex) {
			ex.printStackTrace();
			System.out.println("config.xml has invalid structure");
		}
	}

}
